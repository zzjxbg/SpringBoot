.SpringBoot启动默认加载xxxAutoConfiguration类(自动配置类)
.SpringMVC功能的自动配置类WebMvcAutoConfiguration
.@Configuration(
     proxyBeanMethods = false
 )
 @ConditionalOnWebApplication(
     type = Type.SERVLET
 )
 @ConditionalOnClass({Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class})
 @ConditionalOnMissingBean({WebMvcConfigurationSupport.class})
 @AutoConfigureOrder(-2147483638)
 @AutoConfigureAfter({DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class, ValidationAutoConfiguration.class})
 public class WebMvcAutoConfiguration {}

.给容器中配置了什么
@Configuration(proxyBeanMethods = false)
    @Import({WebMvcAutoConfiguration.EnableWebMvcConfiguration.class})
    @EnableConfigurationProperties({WebMvcProperties.class, ResourceProperties.class, WebProperties.class})
    @Order(0)
    public static class WebMvcAutoConfigurationAdapter implements WebMvcConfigurer, ServletContextAware {}
配置文件的相关属性和xxx进行了绑定,WebMvcProperties==spring.mvc, ResourceProperties==spring.resources
//有参构造器所有参数的值都会从容器中确定
// ResourceProperties resourceProperties 获取和spring.resources绑定的所有的值的对象
// WebProperties webProperties 获取和spring.mvc绑定的所有的值的对象
// ListableBeanFactory beanFactory spring的beanFactory
// HttpMessageConverters 找到所有HttpMessageConverters
// ResourceHandlerRegistrationCustomizer 找到资源处理器的自定义器
// DispatcherServletPath
// ServletRegistrationBean  给应用注册Servlet、Filter
 public WebMvcAutoConfigurationAdapter(ResourceProperties resourceProperties, WebProperties webProperties, WebMvcProperties mvcProperties, ListableBeanFactory beanFactory, ObjectProvider<HttpMessageConverters> messageConvertersProvider, ObjectProvider<WebMvcAutoConfiguration.ResourceHandlerRegistrationCustomizer> resourceHandlerRegistrationCustomizerProvider, ObjectProvider<DispatcherServletPath> dispatcherServletPath, ObjectProvider<ServletRegistrationBean<?>> servletRegistrations) {
            this.resourceProperties = (Resources)(resourceProperties.hasBeenCustomized() ? resourceProperties : webProperties.getResources());
            this.mvcProperties = mvcProperties;
            this.beanFactory = beanFactory;
            this.messageConvertersProvider = messageConvertersProvider;
            this.resourceHandlerRegistrationCustomizer = (WebMvcAutoConfiguration.ResourceHandlerRegistrationCustomizer)resourceHandlerRegistrationCustomizerProvider.getIfAvailable();
            this.dispatcherServletPath = dispatcherServletPath;
            this.servletRegistrations = servletRegistrations;
            this.mvcProperties.checkConfiguration();
        }

2.资源处理的默认规则
  public void addResourceHandlers(ResourceHandlerRegistry registry) {
              if (!this.resourceProperties.isAddMappings()) {
                  logger.debug("Default resource handling disabled");
              } else {
                  this.addResourceHandler(registry, "/webjars/**", "classpath:/META-INF/resources/webjars/");
                  this.addResourceHandler(registry, this.mvcProperties.getStaticPathPattern(), (registration) -> {
                      registration.addResourceLocations(this.resourceProperties.getStaticLocations());
                      if (this.servletContext != null) {
                          ServletContextResource resource = new ServletContextResource(this.servletContext, "/");
                          registration.addResourceLocations(new Resource[]{resource});
                      }

                  });
              }
          }

  public static class Resources {
          private static final String[] CLASSPATH_RESOURCE_LOCATIONS = new String[]{"classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/"};
          private String[] staticLocations;
          private boolean addMappings;
          private boolean customized;
          private final WebProperties.Resources.Chain chain;
          private final WebProperties.Resources.Cache cache;

          public Resources() {
              this.staticLocations = CLASSPATH_RESOURCE_LOCATIONS;
              this.addMappings = true;
              this.customized = false;
              this.chain = new WebProperties.Resources.Chain();
              this.cache = new WebProperties.Resources.Cache();
          }
  }
  spring:
    resources：
      add-mappings: false  禁用所有静态资源规则

